Microsoft (R) Macro Assembler Version 14.29.30151.0	    08/17/23 01:08:12
.String Primitives/Macros     (Proj06_oluyoler		     Page 1 - 1


				TITLE  String Primitives/Macros     (Proj06_oluyoler)

				; Author: Richard Oluyole
				; Last Modified: 07/18/2023
				; OSU email address: oluyoler@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:      6           Due Date: 07/18/2023
				; Description: This program will receive and validate user input as a string, convert and sum the inputs, 
				;				and return the summed value/average.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;Macros

				mDisplayString	MACRO stringAddress
					push	edx
					mov		edx,stringAddress
					call	WriteString
					;call	crlf
					pop		edx
				ENDM


				mGetString		MACRO prompt,bufferAddress,bufferSize,byteNum

					push	edx
					push	ecx
					push	eax

					mDisplayString	prompt
					mov		edx, bufferAddress
					mov		ecx, bufferSize
					call	ReadString
					mov		[byteNum],eax ; sending back the number of bytes entered 

					pop eax
					pop ecx
					pop	edx
				ENDM

				;Constants
 = 7FFFFFFF			MAX_SDWORD =  +2147483647
 =-80000000			MIN_SDWORD =  -2147483648
 = 0000000A			ARRAYSIZE  =  10



 =-000000D9			testVal		= -217


 00000000			.data
 00000000  0000000A [		ARRAY		SDWORD	ARRAYSIZE DUP (?)
	    00000000
	   ]
 00000028  00000028 [		BUFFER		BYTE	40	DUP(0) ;allow up to 40 chars, but anything above 11 is later rejected in ReadVal
	    00
	   ]
 00000050 00000000		byteCount	SDWORD   ?


 00000054  0000000C [		testBuffer	BYTE	12	DUP(0)
	    00
	   ]

 00000060 00000000		average		SDWORD ?
 00000064 00000000		sum			SDWORD 0
 00000068 00000000		subtotal	SDWORD ?


 0000006C 54 68 65 20 66	intro1		BYTE "The following program takes in 10 user inputs as strings verifies they are valid and returns the rounded average and sum that is represented.",0
	   6F 6C 6C 6F 77
	   69 6E 67 20 70
	   72 6F 67 72 61
	   6D 20 74 61 6B
	   65 73 20 69 6E
	   20 31 30 20 75
	   73 65 72 20 69
	   6E 70 75 74 73
	   20 61 73 20 73
	   74 72 69 6E 67
	   73 20 76 65 72
	   69 66 69 65 73
	   20 74 68 65 79
	   20 61 72 65 20
	   76 61 6C 69 64
	   20 61 6E 64 20
	   72 65 74 75 72
	   6E 73 20 74 68
	   65 20 72 6F 75
	   6E 64 65 64 20
	   61 76 65 72 61
	   67 65 20 61 6E
	   64 20 73 75 6D
	   20 74 68 61 74
	   20 69 73 20 72
	   65 70 72 65 73
	   65 6E 74 65 64
	   2E 00
 000000FA 54 68 65 20 69	intro2		BYTE "The inputs must represent numbers [-2^31,2^31-1] to be valid ",0
	   6E 70 75 74 73
	   20 6D 75 73 74
	   20 72 65 70 72
	   65 73 65 6E 74
	   20 6E 75 6D 62
	   65 72 73 20 5B
	   2D 32 5E 33 31
	   2C 32 5E 33 31
	   2D 31 5D 20 74
	   6F 20 62 65 20
	   76 61 6C 69 64
	   20 00
 00000138 41 66 74 65 72	intro3		BYTE "After collecting 10 numbers the running sum and rounded average will be displayed.",0
	   20 63 6F 6C 6C
	   65 63 74 69 6E
	   67 20 31 30 20
	   6E 75 6D 62 65
	   72 73 20 74 68
	   65 20 72 75 6E
	   6E 69 6E 67 20
	   73 75 6D 20 61
	   6E 64 20 72 6F
	   75 6E 64 65 64
	   20 61 76 65 72
	   61 67 65 20 77
	   69 6C 6C 20 62
	   65 20 64 69 73
	   70 6C 61 79 65
	   64 2E 00

 0000018B 45 6E 74 65 72	promptUser	BYTE "Enter in a signed number: ",0
	   20 69 6E 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 000001A6 57 68 61 74 20	rePrompt	BYTE "What you entered is either too large,too small, or not a number.Try again: ",0
	   79 6F 75 20 65
	   6E 74 65 72 65
	   64 20 69 73 20
	   65 69 74 68 65
	   72 20 74 6F 6F
	   20 6C 61 72 67
	   65 2C 74 6F 6F
	   20 73 6D 61 6C
	   6C 2C 20 6F 72
	   20 6E 6F 74 20
	   61 20 6E 75 6D
	   62 65 72 2E 54
	   72 79 20 61 67
	   61 69 6E 3A 20
	   00

 000001F2 48 65 72 65 20	YouEntered	BYTE "Here are your 10 inputs",0
	   61 72 65 20 79
	   6F 75 72 20 31
	   30 20 69 6E 70
	   75 74 73 00
 0000020A 54 68 65 20 74	showAverage	BYTE "The truncated average is:",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   00
 00000224 54 68 65 20 63	showSum		BYTE "The calculated sum is:",0
	   61 6C 63 75 6C
	   61 74 65 64 20
	   73 75 6D 20 69
	   73 3A 00
 0000023B 54 68 61 6E 6B	goodbye		BYTE "Thanks for using the program,bye now.",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 74 68 65
	   20 70 72 6F 67
	   72 61 6D 2C 62
	   79 65 20 6E 6F
	   77 2E 00


 00000000			.code
 00000000			main PROC

				;	mDisplayString offset intro1
				;	call crlf
				;	mDisplayString offset intro2
				;	call crlf
				;	mDisplayString offset intro3
				;	call crlf
					

 00000000  E9 00000082			JMP	_ender
					;prepare to fill the array
 00000005  B9 0000000A			mov		ecx,ARRAYSIZE
 0000000A  BF 00000000 R		mov		edi,offset ARRAY
 0000000F				fillArray:
 0000000F  68 000001A6 R			push	offset	rePrompt
 00000014  68 0000018B R			push	offset	promptUser
 00000019  68 00000028 R			push	offset	BUFFER
 0000001E  6A 28				push	sizeof	BUFFER
 00000020  68 00000050 R			push	offset	byteCount
 00000025  E8 000000B0				call	ReadVal
 0000002A  89 1F				mov		[edi],ebx
 0000002C  83 C7 04				add		edi,4
 0000002F  01 1D 00000064 R			add		sum,ebx
 00000035  E2 D8				LOOP fillArray

					
 00000037  BE 00000000 R		mov		esi,offset ARRAY
 0000003C  B9 0000000A			mov		ecx,ARRAYSIZE
 00000041				l2r2:
 00000041  8B 06				mov		eax,[esi]
 00000043  E8 00000000 E			call	WriteInt
 00000048  E8 00000000 E			call	crlf
 0000004D  83 C6 04				add		esi,4
 00000050  E2 EF				loop l2r2


 00000052  A1 00000064 R			mov		eax,sum
 00000057  BA 00000000				mov		edx,0
 0000005C  BB 0000000A				mov		ebx,ARRAYSIZE
 00000061  A1 00000064 R			mov		eax,sum
 00000066  99					cdq
 00000067  F7 FB				idiv	ebx
 00000069  A3 00000060 R			mov		average,eax

 0000006E  A1 00000064 R			mov		eax,sum
 00000073  E8 00000000 E			call	WriteInt
 00000078  E8 00000000 E			call	crlf
 0000007D  A1 00000060 R			mov		eax,average
 00000082  E8 00000000 E			call	WriteInt
						
 00000087					_ender:
 00000087  68 FFFFFF27				push	testVal
 0000008C  68 00000054 R			push	offset testBuffer
 00000091  E8 00000007				call	WriteVal



						Invoke ExitProcess,0	; exit to operating system
 00000096  6A 00	   *	    push   +000000000h
 00000098  E8 00000000 E   *	    call   ExitProcess
 0000009D			main ENDP






 0000009D			WriteVal	PROC
 0000009D  55				push	ebp
 0000009E  8B EC			mov		ebp,esp
					;clear  leftover in used registers just in case
 000000A0  33 C0			xor		eax,eax
 000000A2  33 DB			xor		ebx,ebx
 000000A4  33 D2			xor		edx,edx
 000000A6  33 C9			xor		ecx,ecx
					
 000000A8  8B 45 0C			mov		eax,[ebp+12]
					
					;check negative here and negate if neeeded
 000000AB  BB 0000000A			mov		ebx,10
 000000B0  F7 D8			neg		eax

 000000B2				_getLen:
 000000B2  83 F8 00				cmp		eax,0
 000000B5  7E 08				JLE		_foundLen	
					
 000000B7  F7 FB				idiv	ebx
 000000B9  52					push	edx ; save remainder to stack
 000000BA  33 D2				xor		edx,edx
 000000BC  41					inc		ecx
 000000BD  EB F3				JMP		_getLen
 000000BF				_foundLen:	;ecx has the length
						
 000000BF  8B 7D 08			mov		edi,[ebp+8]
 000000C2  FC				CLD
 000000C3				printL:
 000000C3  5A					pop		edx
 000000C4  83 C2 30				add		edx,48
 000000C7  8B C2				mov		eax,edx
 000000C9  AA					stosb
						;call	WriteChar
 000000CA  E2 F7				LOOP	printL
					
 000000CC  BA 00000054 R		mov		edx,offset testBuffer
 000000D1  E8 00000000 E		call	WriteString





 000000D6  5D				pop		ebp
 000000D7  C2 0008			RET		8
 000000DA			WriteVal	ENDP


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Repeatedly takes user input until the user enters a valid SDWORD and converts the
				;	the ASCII characters to an integer.
				;
				; Preconditions: None 
				;	
				; Receives:
				; [ebp+8]  = the prompt passed to mGetString the first time
				; [ebp+12] = the size of the character buffer/string 
				; [ebp+16] = the address of the character buffer/string
				; [ebp+20] = the count of bytes in the chracter buffer
				; [ebp+24] = an alternate prompt when the user enters an invalid string
				;
				; Returns:
				;	ebx will contain the valid and converted integer
				; ---------------------------------------------------------------------------------
 000000DA			ReadVal	 PROC
 000000DA  55				push	ebp
 000000DB  8B EC			mov		ebp,esp
 000000DD  51				push	ecx
 000000DE  57				push	edi
 000000DF  50				push	eax

					;				+20	       +16				+12			 +8
					;			promptUser,offset BUFFER ,sizeof BUFFER,offset byteCount
 000000E0				_firstPrompt:
						mGetString [ebp+20],[ebp+16],[ebp+12],[ebp+8]
 000000E0  52		     1		push	edx
 000000E1  51		     1		push	ecx
 000000E2  50		     1		push	eax
 000000E3  52		     2		push	edx
 000000E4  8B 55 14	     2		mov		edx,[ebp+20]
 000000E7  E8 00000000 E     2		call	WriteString
 000000EC  5A		     2		pop		edx
 000000ED  8B 55 10	     1		mov		edx, [ebp+16]
 000000F0  8B 4D 0C	     1		mov		ecx, [ebp+12]
 000000F3  E8 00000000 E     1		call	ReadString
 000000F8  89 45 08	     1		mov		[[ebp+8]],eax ; sending back the number of bytes entered 
 000000FB  58		     1		pop eax
 000000FC  59		     1		pop ecx
 000000FD  5A		     1		pop	edx
 000000FE  EB 1E				JMP		_verifyLength
					
 00000100				_subsequentPrompt: ; ebp+24 is the rePrompt
						mGetString [ebp+24],[ebp+16],[ebp+12],[ebp+8]
 00000100  52		     1		push	edx
 00000101  51		     1		push	ecx
 00000102  50		     1		push	eax
 00000103  52		     2		push	edx
 00000104  8B 55 18	     2		mov		edx,[ebp+24]
 00000107  E8 00000000 E     2		call	WriteString
 0000010C  5A		     2		pop		edx
 0000010D  8B 55 10	     1		mov		edx, [ebp+16]
 00000110  8B 4D 0C	     1		mov		ecx, [ebp+12]
 00000113  E8 00000000 E     1		call	ReadString
 00000118  89 45 08	     1		mov		[[ebp+8]],eax ; sending back the number of bytes entered 
 0000011B  58		     1		pop eax
 0000011C  59		     1		pop ecx
 0000011D  5A		     1		pop	edx

 0000011E				_verifyLength:
 0000011E  8B 45 08				mov		eax,[ebp+8]
 00000121  83 F8 0C				cmp		eax,12
 00000124  7F DA				JG		_subsequentPrompt

						; preparing to loop over the string
 00000126  8B 75 10				mov		esi,[ebp+16] 
 00000129  8B 4D 08				mov		ecx,[ebp+8] 

						;prepare eax to store converted int, and edi to represent the sign
 0000012C  B8 00000000				mov		eax,0
 00000131  BF 00000000				mov		edi,0

 00000136				verifyChars:	
 00000136  AC					lodsb	
						
						;check for + sign
 00000137  3C 2B				cmp		al,43
 00000139  74 0E				JE		_checkPlus
						
						;check for - sign
 0000013B  3C 2D				cmp		al,45
 0000013D  74 16				JE		_checkNegative
						
						; check the char is an ASCII digit
 0000013F  3C 39				cmp		al,57
 00000141  7F 22				JG		_invalidChar
 00000143  3C 30				cmp		al,48
 00000145  7C 1E				JL		_invalidChar
						
 00000147  EB 18				JMP		_continue
 00000149					_checkPlus:
 00000149  3B 4D 08					cmp		ecx,[ebp+8]
 0000014C  75 17					JNE		_invalidChar ;+ not at start, string invalid
 0000014E  BF 00000001					mov		edi,1
 00000153  EB 0C					JMP		_continue
 00000155					_checkNegative:
 00000155  3B 4D 08					cmp		ecx,[ebp+8]
 00000158  75 0B					JNE		_invalidChar ;- not at start, string invalid
 0000015A  BF 00000002					mov		edi,2
 0000015F  EB 00					JMP		_continue
 00000161					_continue:
 00000161  E2 D3					LOOP	 verifyChars

 00000163  EB 02				JMP		_allValidChars ;valid string, proceed to conversion
 00000165				_invalidChar:
 00000165  EB 99				JMP	_subsequentPrompt

 00000167				_allValidChars:
						;prepare to loop over string once again
 00000167  8B 75 10				mov		esi,[ebp+16] ;start of string in memory
 0000016A  8B 4D 08				mov		ecx,[ebp+8] 
 0000016D  B8 00000000				mov		eax,0
 00000172  FC					CLD
						
						;skip first char if it is +/-
 00000173  83 FF 02				cmp		edi,2 
 00000176  74 07				JE		_skipFirstChar
 00000178  83 FF 01				cmp		edi,1
 0000017B  74 02				JE		_skipFirstChar
 0000017D  EB 02				JMP		convChars
						
						
 0000017F					_skipFirstChar:
 0000017F  46						inc		esi
 00000180  49						dec		ecx
						
					
 00000181					convChars:
 00000181  BB 0000000A					mov		ebx,10
 00000186  33 D2					xor		edx,edx
 00000188  F7 EB					imul	ebx ;shift char digit left
 0000018A  0F 80 FFFFFF70				jo		_subsequentPrompt

 00000190  50						push	eax 
 00000191  33 C0					xor		eax,eax
 00000193  AC						lodsb

 00000194  83 E8 30					sub		eax,48; ASCII subtraction 
 00000197  8B D8					mov		ebx,eax
 00000199  58						pop		eax
							
							;if edi is 2 subtract from eax otherwise add 
 0000019A  83 FF 02					cmp		edi,2
 0000019D  74 04					JE		_subtract
 0000019F  03 C3					add		eax,ebx
 000001A1  EB 02					JMP		_checkOverflow
 000001A3						_subtract:
 000001A3  2B C3						sub		eax,ebx
 000001A5						_checkOverflow:
 000001A5  0F 80 FFFFFF55					jo		_subsequentPrompt
 000001AB  E2 D4					LOOP convChars

					;ebx now contains the valid SDWORD for the input string
 000001AD  8B D8			mov		ebx,eax
 000001AF  58				pop		eax
 000001B0  5F				pop		edi
 000001B1  59				pop		ecx
 000001B2  5D				pop		ebp
 000001B3  C2 0014			RET		20
 000001B6			ReadVal	 ENDP



				END main
Microsoft (R) Macro Assembler Version 14.29.30151.0	    08/17/23 01:08:12
.String Primitives/Macros     (Proj06_oluyoler		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000261 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001B6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000DA _TEXT	Length= 000000DC Public STDCALL
  _firstPrompt . . . . . . . . .	L Near	 000000E0 _TEXT	
  _subsequentPrompt  . . . . . .	L Near	 00000100 _TEXT	
  _verifyLength  . . . . . . . .	L Near	 0000011E _TEXT	
  verifyChars  . . . . . . . . .	L Near	 00000136 _TEXT	
  _checkPlus . . . . . . . . . .	L Near	 00000149 _TEXT	
  _checkNegative . . . . . . . .	L Near	 00000155 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000161 _TEXT	
  _invalidChar . . . . . . . . .	L Near	 00000165 _TEXT	
  _allValidChars . . . . . . . .	L Near	 00000167 _TEXT	
  _skipFirstChar . . . . . . . .	L Near	 0000017F _TEXT	
  convChars  . . . . . . . . . .	L Near	 00000181 _TEXT	
  _subtract  . . . . . . . . . .	L Near	 000001A3 _TEXT	
  _checkOverflow . . . . . . . .	L Near	 000001A5 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000009D _TEXT	Length= 0000003D Public STDCALL
  _getLen  . . . . . . . . . . .	L Near	 000000B2 _TEXT	
  _foundLen  . . . . . . . . . .	L Near	 000000BF _TEXT	
  printL . . . . . . . . . . . .	L Near	 000000C3 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009D Public STDCALL
  fillArray  . . . . . . . . . .	L Near	 0000000F _TEXT	
  l2r2 . . . . . . . . . . . . .	L Near	 00000041 _TEXT	
  _ender . . . . . . . . . . . .	L Near	 00000087 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
ARRAY  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
BUFFER . . . . . . . . . . . . .	Byte	 00000028 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_SDWORD . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_SDWORD . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
YouEntered . . . . . . . . . . .	Byte	 000001F2 _DATA	
average  . . . . . . . . . . . .	DWord	 00000060 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 00000050 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000023B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 0000006C _DATA	
intro2 . . . . . . . . . . . . .	Byte	 000000FA _DATA	
intro3 . . . . . . . . . . . . .	Byte	 00000138 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
promptUser . . . . . . . . . . .	Byte	 0000018B _DATA	
rePrompt . . . . . . . . . . . .	Byte	 000001A6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
showAverage  . . . . . . . . . .	Byte	 0000020A _DATA	
showSum  . . . . . . . . . . . .	Byte	 00000224 _DATA	
subtotal . . . . . . . . . . . .	DWord	 00000068 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000064 _DATA	
testBuffer . . . . . . . . . . .	Byte	 00000054 _DATA	
testVal  . . . . . . . . . . . .	Number	 -000000D9h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
